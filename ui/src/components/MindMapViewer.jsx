import React, { useRef, useEffect, useState } from 'react';
import { Markmap } from 'markmap-view';
import { Transformer } from 'markmap-lib';
import { FiZoomIn, FiZoomOut, FiMaximize2, FiDownload, FiInfo } from 'react-icons/fi';

// M·∫´u markdown ƒë·ªÉ s·ª≠ d·ª•ng khi kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c c√≥ l·ªói
const FALLBACK_MARKDOWN = `# üß† Mind Map M·∫´u
- üìä Nh√°nh 1: Kh√°i ni·ªám ch√≠nh
  - üìå Chi ti·∫øt 1.1: *Th√¥ng tin b·ªï sung*
  - üîç Chi ti·∫øt 1.2: **ƒêi·ªÉm quan tr·ªçng**
- üõ†Ô∏è Nh√°nh 2: C√¥ng c·ª•
  - üì± ·ª®ng d·ª•ng th·ª±c ti·ªÖn
- üìù Nh√°nh 3: T·ªïng k·∫øt`;

// T·∫°o transformer v·ªõi c√°c plugin c·∫ßn thi·∫øt
const transformer = new Transformer();

// H√†m ti·ªán √≠ch ƒë·ªÉ t·∫°o ·∫£nh PNG t·ª´ SVG
const downloadAsPng = (svg, filename = 'mindmap.png') => {
  const canvas = document.createElement('canvas');
  const svgRect = svg.getBoundingClientRect();
  canvas.width = svgRect.width * 2; // Scale up for better quality
  canvas.height = svgRect.height * 2;
  
  const ctx = canvas.getContext('2d');
  ctx.scale(2, 2); // Higher resolution
  
  // ƒê·∫∑t n·ªÅn tr·∫Øng cho m√†u xu·∫•t ra
  ctx.fillStyle = '#ffffff';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  
  // Chuy·ªÉn ƒë·ªïi SVG th√†nh ·∫£nh
  const data = new XMLSerializer().serializeToString(svg);
  const img = new Image();
  img.onload = () => {
    ctx.drawImage(img, 0, 0);
    // T·∫°o link t·∫£i xu·ªëng
    const a = document.createElement('a');
    a.download = filename;
    a.href = canvas.toDataURL('image/png');
    a.click();
  };
  img.src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(data)));
};

const MindMapViewer = ({ markdown }) => {
  const svgRef = useRef(null);
  const containerRef = useRef(null);
  const mmRef = useRef(null); // Ref to store the Markmap instance
  const [error, setError] = useState(null);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [debugInfo, setDebugInfo] = useState({
    hasMarkdown: Boolean(markdown),
    markdownLength: markdown?.length || 0,
    svgReady: false,
    renderAttempts: 0
  });

  // X·ª≠ l√Ω v√†o/ra fullscreen
  const toggleFullscreen = () => {
    if (!document.fullscreenElement) {
      containerRef.current.requestFullscreen().catch(err => {
        console.error(`L·ªói chuy·ªÉn sang ch·∫ø ƒë·ªô to√†n m√†n h√¨nh:`, err);
      });
    } else {
      document.exitFullscreen();
    }
  };

  // L·∫Øng nghe thay ƒë·ªïi fullscreen
  useEffect(() => {
    const handleFullscreenChange = () => {
      setIsFullscreen(!!document.fullscreenElement);
      // ƒêi·ªÅu ch·ªânh l·∫°i k√≠ch th∆∞·ªõc khi v√†o/ra ch·∫ø ƒë·ªô to√†n m√†n h√¨nh
      if (mmRef.current) {
        setTimeout(() => {
          mmRef.current.fit();
        }, 100);
      }
    };

    document.addEventListener('fullscreenchange', handleFullscreenChange);
    return () => {
      document.removeEventListener('fullscreenchange', handleFullscreenChange);
    };
  }, []);

  useEffect(() => {
    // C·∫≠p nh·∫≠t th√¥ng tin debug khi markdown thay ƒë·ªïi
    setDebugInfo(prev => ({
      ...prev,
      hasMarkdown: Boolean(markdown),
      markdownLength: markdown?.length || 0,
      renderAttempts: prev.renderAttempts + 1
    }));

    // N·∫øu kh√¥ng c√≥ svg ref, kh√¥ng l√†m g√¨ c·∫£
    if (!svgRef.current) {
      console.error("MindMapViewer: SVG ref is null");
      setError("Kh√¥ng th·ªÉ t·∫°o khu v·ª±c v·∫Ω mind map");
      return;
    }

    // Reset error state
    setError(null);

    // Ensure previous instance is destroyed if markdown changes
    if (mmRef.current) {
      mmRef.current.destroy();
      mmRef.current = null;
    }

    // Reset SVG content ƒë·ªÉ tr√°nh l·ªói
    while (svgRef.current.firstChild) {
      svgRef.current.removeChild(svgRef.current.lastChild);
    }

    // Th√™m thu·ªôc t√≠nh width v√† height ƒë·ªÉ ƒë·∫£m b·∫£o SVG hi·ªÉn th·ªã ƒë√∫ng
    svgRef.current.setAttribute('width', '100%');
    svgRef.current.setAttribute('height', '100%');
    
    try {
      // S·ª≠ d·ª•ng markdown t·ª´ props ho·∫∑c fallback n·∫øu kh√¥ng c√≥
      const mdContent = markdown?.trim() || FALLBACK_MARKDOWN;
      
      console.log("MindMapViewer: Rendering markdown:", mdContent.substring(0, 100) + "...");
      
      // Transform Markdown to Markmap data structure
      const { root, features } = transformer.transform(mdContent);

      if (!root) {
        throw new Error("Failed to transform markdown to mind map structure");
      }

      console.log("MindMapViewer: Transformed data:", { 
        rootKeys: Object.keys(root),
        childrenCount: root.children?.length || 0
      });

      // ƒê√°nh d·∫•u SVG ƒë√£ s·∫µn s√†ng
      setDebugInfo(prev => ({ ...prev, svgReady: true }));

      // T√πy ch·ªânh hi·ªÉn th·ªã c√°c n√∫t nh·ªè t∆∞·ª£ng tr∆∞ng
      const enhancedOptions = {
        autoFit: true, // Auto fit content on initial render
        color: (node) => {
          // Custom color scheme based on depth & content
          const colors = [
            '#8b5cf6', // T√≠m - Ch·ªß ƒë·ªÅ ch√≠nh 
            '#6366f1', // T√≠m nh·∫°t - Nh√°nh ch√≠nh
            '#ec4899', // H·ªìng - Nh√°nh ph·ª• c·∫•p 1
            '#f97316', // Cam - Nh√°nh ph·ª• c·∫•p 2
            '#14b8a6', // Xanh ng·ªçc - Nh√°nh ph·ª• c·∫•p 3
            '#06b6d4'  // Xanh d∆∞∆°ng - Nh√°nh ph·ª• c·∫•p 4
          ];
          
          // D√πng ƒë·ªô s√¢u c·ªßa node ƒë·ªÉ quy·∫øt ƒë·ªãnh m√†u s·∫Øc
          const depth = node.depth || 0;
          
          // N·∫øu node c√≥ ch·ª©a c√°c k√Ω t·ª± emoji nh·∫•t ƒë·ªãnh, ∆∞u ti√™n m√†u s·∫Øc theo ch·ª©c nƒÉng
          const text = node.data.text || '';
          if (text.includes('üí°') || text.includes('üîç') || text.includes('‚ùì')) {
            return '#f59e0b'; // V√†ng cho nh·ªØng ƒëi·ªÉm quan tr·ªçng, c√¢u h·ªèi
          }
          if (text.includes('üìä') || text.includes('üìà') || text.includes('üìâ')) {
            return '#10b981'; // Xanh l√° cho th·ªëng k√™, s·ªë li·ªáu
          }
          if (text.includes('‚ö†Ô∏è') || text.includes('üö´') || text.includes('‚õî')) {
            return '#ef4444'; // ƒê·ªè cho c·∫£nh b√°o, l∆∞u √Ω
          }
          
          return colors[depth % colors.length];
        },
        paddingX: 16, // Add some padding
        duration: 500, // Animation duration in ms
        maxWidth: 300, // Max width for text content
        nodeFont: (node) => { 
          // Thay ƒë·ªïi font ch·ªØ theo c·∫•p ƒë·ªô
          const depth = node.depth || 0;
          if (depth === 0) return 'bold 16px Sans-serif'; // Ti√™u ƒë·ªÅ l·ªõn h∆°n
          return '14px Sans-serif'; // Font ch·ªØ m·∫∑c ƒë·ªãnh
        },
        nodeMinHeight: 18, // Chi·ªÅu cao t·ªëi thi·ªÉu c·ªßa node
        spacingVertical: 7, // Kho·∫£ng c√°ch d·ªçc gi·ªØa c√°c node
        spacingHorizontal: 120, // Kho·∫£ng c√°ch ngang gi·ªØa c√°c node
        embedGlobalCSS: false, // T·∫Øt nh√∫ng CSS to√†n c·ª•c ƒë·ªÉ tr√°nh xung ƒë·ªôt
        initialExpandLevel: 2, // M·ªü r·ªông 2 c·∫•p ƒë·∫ßu ti√™n
        linkShape: 'diagonal', // H√¨nh d·∫°ng ƒë∆∞·ªùng k·∫øt n·ªëi - diagonal ho·∫∑c bracket
        // C√°c t√πy ch·ªçn kh√¥ng c√≤n ƒë∆∞·ª£c h·ªó tr·ª£ trong phi√™n b·∫£n m·ªõi
        // richText: true, 
        // lineWidth: (node) => {
        //   const depth = node.depth || 0;
        //   return 2 - Math.min(depth / 5, 0.5);
        // },
      };

      // T·∫°o instance Markmap v·ªõi c√°c t√πy ch·ªçn n√¢ng cao - th√™m timeout ƒë·ªÉ ƒë·∫£m b·∫£o DOM ƒë√£ s·∫µn s√†ng
      setTimeout(() => {
        try {
          mmRef.current = Markmap.create(svgRef.current, enhancedOptions, root);
          
          // ƒê·∫£m b·∫£o map ƒë∆∞·ª£c hi·ªÉn th·ªã ƒë√∫ng sau khi render
          setTimeout(() => {
            if (mmRef.current) {
              mmRef.current.fit(); // Fit map to view
            }
          }, 100);
          
        } catch (err) {
          console.error("Error creating Markmap instance:", err);
          setError(`L·ªói t·∫°o mind map: ${err.message}`);
        }
      }, 0);

    } catch (error) {
      console.error("Error rendering Markmap:", error);
      setError(`L·ªói hi·ªÉn th·ªã mind map: ${error.message}`);
    }

    // Cleanup function to destroy Markmap instance on unmount
    return () => {
      if (mmRef.current) {
        mmRef.current.destroy();
        mmRef.current = null;
      }
    };
  }, [markdown]); // Re-run effect when markdown content changes

  // X·ª≠ l√Ω ph√≥ng to, thu nh·ªè
  const handleZoomIn = () => {
    if (mmRef.current) {
      const { scale } = mmRef.current.state;
      mmRef.current.setZoom(scale * 1.25);
    }
  };

  const handleZoomOut = () => {
    if (mmRef.current) {
      const { scale } = mmRef.current.state;
      mmRef.current.setZoom(scale / 1.25);
    }
  };

  // X·ª≠ l√Ω t·∫£i xu·ªëng ·∫£nh PNG
  const handleDownload = () => {
    if (svgRef.current) {
      // L·∫•y t√™n ch·ªß ƒë·ªÅ t·ª´ markdown n·∫øu c√≥
      let filename = 'mindmap.png';
      if (markdown) {
        const match = markdown.match(/^#\s*([^\n]+)/);
        if (match && match[1]) {
          // L√†m s·∫°ch ti√™u ƒë·ªÅ (lo·∫°i b·ªè emoji v√† k√Ω t·ª± ƒë·∫∑c bi·ªát)
          let title = match[1].replace(/[^\p{L}\p{N}\s]/gu, '').trim();
          if (title) filename = `${title.slice(0, 30)}.png`;
        }
      }
      downloadAsPng(svgRef.current, filename);
    }
  };

  // Hi·ªÉn th·ªã th√¥ng tin debug
  const toggleDebugInfo = () => {
    console.log("MindMap Debug Info:", {
      ...debugInfo,
      markdownSample: markdown ? markdown.substring(0, 200) + "..." : "None",
      svgElement: svgRef.current,
      markmapInstance: mmRef.current
    });
    
    // Th√¥ng b√°o ƒë√£ log debug info
    alert("ƒê√£ log th√¥ng tin debug v√†o console. Nh·∫•n F12 ƒë·ªÉ xem.");
  };

  return (
    <div className="w-full h-full flex flex-col" ref={containerRef}>
      {error && (
        <div className="bg-red-900/30 text-red-400 p-3 mb-3 rounded-md border border-red-700 text-sm">
          <p>{error}</p>
          <p className="mt-1 text-xs">
            <button 
              className="text-blue-400 underline" 
              onClick={() => {
                // Th·ª≠ render l·∫°i v·ªõi markdown m·∫´u
                setError(null);
                const md = FALLBACK_MARKDOWN;
                const { root } = transformer.transform(md);
                if (mmRef.current) mmRef.current.destroy();
                mmRef.current = Markmap.create(svgRef.current, { autoFit: true }, root);
              }}
            >
              Th·ª≠ hi·ªÉn th·ªã mind map m·∫´u
            </button>
          </p>
        </div>
      )}
      
      <div className="w-full flex-1 border border-gray-700 rounded-lg overflow-hidden bg-gray-800/50 relative">
        {/* Controls - v·ªõi nhi·ªÅu n√∫t h∆°n v√† tooltip */}
        <div className="absolute top-3 right-3 z-10 bg-gray-800/80 rounded-md p-1.5 flex gap-2 backdrop-blur-sm">
          <button 
            className="bg-purple-600/70 hover:bg-purple-600 text-white p-1.5 rounded flex items-center justify-center" 
            onClick={handleZoomIn}
            title="Ph√≥ng to"
          >
            <FiZoomIn size={16} />
          </button>
          <button 
            className="bg-purple-600/70 hover:bg-purple-600 text-white p-1.5 rounded flex items-center justify-center"
            onClick={handleZoomOut}
            title="Thu nh·ªè"
          >
            <FiZoomOut size={16} />
          </button>
          <button 
            className="bg-purple-600/70 hover:bg-purple-600 text-white p-1.5 rounded flex items-center justify-center"
            onClick={() => mmRef.current?.fit()}
            title="Kh·ªõp v·ªõi m√†n h√¨nh"
          >
            <FiMaximize2 size={16} />
          </button>
          <button 
            className="bg-green-600/70 hover:bg-green-600 text-white p-1.5 rounded flex items-center justify-center"
            onClick={handleDownload}
            title="T·∫£i xu·ªëng d∆∞·ªõi d·∫°ng ·∫£nh PNG"
          >
            <FiDownload size={16} />
          </button>
          <button 
            className="bg-blue-600/70 hover:bg-blue-600 text-white p-1.5 rounded flex items-center justify-center"
            onClick={toggleDebugInfo}
            title="Hi·ªÉn th·ªã th√¥ng tin debug"
          >
            <FiInfo size={16} />
          </button>
        </div>
        
        {/* SVG container for Markmap - th√™m className ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªÉn th·ªã */}
        <svg 
          ref={svgRef} 
          className="w-full h-full markmap-svg" 
          width="100%" 
          height="100%" 
          viewBox="0 0 800 600"
        />
        
        {/* Help text - c·∫£i thi·ªán v·ªõi th√™m th√¥ng tin */}
        <div className="absolute bottom-2 left-2 text-xs text-gray-400 bg-gray-800/80 p-1.5 rounded backdrop-blur-sm max-w-xs">
          <p className="mb-1"><strong>ƒêi·ªÅu khi·ªÉn:</strong> K√©o ƒë·ªÉ di chuy·ªÉn | Scroll ƒë·ªÉ ph√≥ng to/thu nh·ªè</p>
          <p>Click v√†o n√∫t <span className="inline-block w-2 h-2 bg-purple-400 rounded-full mx-1"></span> ƒë·ªÉ m·ªü r·ªông/thu g·ªçn nh√°nh</p>
        </div>
      </div>
    </div>
  );
};

export default MindMapViewer;
