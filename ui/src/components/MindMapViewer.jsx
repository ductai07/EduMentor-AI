import React, { useRef, useEffect, useState } from 'react';
import { Markmap } from 'markmap-view';
import { Transformer } from 'markmap-lib';
import { FiZoomIn, FiZoomOut, FiMaximize2, FiDownload, FiInfo } from 'react-icons/fi';

// M·∫´u markdown ƒë·ªÉ s·ª≠ d·ª•ng khi kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c c√≥ l·ªói
const FALLBACK_MARKDOWN = `# üß† Mind Map M·∫´u
- üìä Nh√°nh 1: Kh√°i ni·ªám ch√≠nh
  - üìå Chi ti·∫øt 1.1: *Th√¥ng tin b·ªï sung*
  - üîç Chi ti·∫øt 1.2: **ƒêi·ªÉm quan tr·ªçng**
- üõ†Ô∏è Nh√°nh 2: C√¥ng c·ª•
  - üì± ·ª®ng d·ª•ng th·ª±c ti·ªÖn
- üìù Nh√°nh 3: T·ªïng k·∫øt`;

// T·∫°o transformer v·ªõi c√°c plugin c·∫ßn thi·∫øt - ƒë·∫£m b·∫£o ch·ªâ t·∫°o m·ªôt l·∫ßn
const transformer = new Transformer();

// ADDED: H√†m x·ª≠ l√Ω markdown ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ c√≥ m·ªôt heading level 1
const preprocessMarkdown = (markdown) => {
  if (!markdown) return FALLBACK_MARKDOWN;
  
  // T√°ch c√°c d√≤ng ƒë·ªÉ ph√¢n t√≠ch
  const lines = markdown.split('\n');
  let firstH1Found = false;
  const processedLines = lines.map(line => {
    // Ki·ªÉm tra xem d√≤ng c√≥ ph·∫£i l√† heading level 1 (b·∫Øt ƒë·∫ßu b·∫±ng # v√† kho·∫£ng tr·∫Øng)
    if (line.trim().match(/^#\s+/)) {
      if (!firstH1Found) {
        firstH1Found = true;
        return line; // Gi·ªØ nguy√™n H1 ƒë·∫ßu ti√™n
      } else {
        // Chuy·ªÉn H1 th·ª© hai tr·ªü ƒëi th√†nh H2
        return '#' + line;
      }
    }
    return line;
  });
  
  return processedLines.join('\n');
};

// H√†m ti·ªán √≠ch ƒë·ªÉ t·∫°o ·∫£nh PNG t·ª´ SVG
const downloadAsPng = (svg, filename = 'mindmap.png') => {
  const canvas = document.createElement('canvas');
  const svgRect = svg.getBoundingClientRect();
  canvas.width = svgRect.width * 2; // Scale up for better quality
  canvas.height = svgRect.height * 2;
  
  const ctx = canvas.getContext('2d');
  ctx.scale(2, 2); // Higher resolution
  
  // ƒê·∫∑t n·ªÅn tr·∫Øng cho m√†u xu·∫•t ra
  ctx.fillStyle = '#ffffff';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  
  // Chuy·ªÉn ƒë·ªïi SVG th√†nh ·∫£nh
  const data = new XMLSerializer().serializeToString(svg);
  const img = new Image();
  img.onload = () => {
    ctx.drawImage(img, 0, 0);
    // T·∫°o link t·∫£i xu·ªëng
    const a = document.createElement('a');
    a.download = filename;
    a.href = canvas.toDataURL('image/png');
    a.click();
  };
  img.src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(data)));
};

const MindMapViewer = ({ markdown }) => {
  const svgRef = useRef(null);
  const containerRef = useRef(null);
  const mmRef = useRef(null); // Ref to store the Markmap instance
  const [error, setError] = useState(null);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [debugInfo, setDebugInfo] = useState({
    hasMarkdown: Boolean(markdown),
    markdownLength: markdown?.length || 0,
    svgReady: false,
    renderAttempts: 0
  });

  // X·ª≠ l√Ω v√†o/ra fullscreen
  const toggleFullscreen = () => {
    if (!document.fullscreenElement) {
      containerRef.current.requestFullscreen().catch(err => {
        console.error(`L·ªói chuy·ªÉn sang ch·∫ø ƒë·ªô to√†n m√†n h√¨nh:`, err);
      });
    } else {
      document.exitFullscreen();
    }
  };

  // L·∫Øng nghe thay ƒë·ªïi fullscreen
  useEffect(() => {
    const handleFullscreenChange = () => {
      setIsFullscreen(!!document.fullscreenElement);
      // ƒêi·ªÅu ch·ªânh l·∫°i k√≠ch th∆∞·ªõc khi v√†o/ra ch·∫ø ƒë·ªô to√†n m√†n h√¨nh
      if (mmRef.current) {
        setTimeout(() => {
          mmRef.current.fit();
        }, 100);
      }
    };

    document.addEventListener('fullscreenchange', handleFullscreenChange);
    return () => {
      document.removeEventListener('fullscreenchange', handleFullscreenChange);
    };
  }, []);

  // Hi·ªÉn th·ªã th√¥ng tin debug
  const toggleDebugInfo = () => {
    console.log("MindMap Debug Info:", {
      ...debugInfo,
      markdownSample: markdown ? markdown.substring(0, 200) + "..." : "None",
      svgElement: svgRef.current,
      markmapInstance: mmRef.current
    });
    
    // Th√¥ng b√°o ƒë√£ log debug info
    alert("ƒê√£ log th√¥ng tin debug v√†o console. Nh·∫•n F12 ƒë·ªÉ xem.");
  };

  useEffect(() => {
    // ADDED: Log ƒë·ªÉ debug
    console.log("MindMapViewer mounting with markdown:", markdown ? `${markdown.substring(0, 50)}...` : "not provided");
    
    // C·∫≠p nh·∫≠t th√¥ng tin debug khi markdown thay ƒë·ªïi
    setDebugInfo(prev => ({
      ...prev,
      hasMarkdown: Boolean(markdown),
      markdownLength: markdown?.length || 0,
      renderAttempts: prev.renderAttempts + 1
    }));

    // N·∫øu kh√¥ng c√≥ svg ref, kh√¥ng l√†m g√¨ c·∫£
    if (!svgRef.current) {
      console.error("MindMapViewer: SVG ref is null");
      setError("Kh√¥ng th·ªÉ t·∫°o khu v·ª±c v·∫Ω mind map");
      return;
    }
    
    // ADDED: Ki·ªÉm tra xem Markmap ƒë√£ ƒë∆∞·ª£c t·∫°o ch∆∞a
    console.log("SVG ref exists:", svgRef.current);

    // Reset error state
    setError(null);

    // Ensure previous instance is destroyed if markdown changes
    if (mmRef.current) {
      console.log("Destroying previous Markmap instance");
      mmRef.current.destroy();
      mmRef.current = null;
    }

    // Reset SVG content ƒë·ªÉ tr√°nh l·ªói
    while (svgRef.current.firstChild) {
      svgRef.current.removeChild(svgRef.current.lastChild);
    }

    // ADDED: ƒê·∫∑t k√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh cho SVG ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªÉn th·ªã
    svgRef.current.setAttribute('width', '100%');
    svgRef.current.setAttribute('height', '100%');
    svgRef.current.setAttribute('style', 'width: 100%; height: 100%;');
    
    try {
      // MODIFIED: X·ª≠ l√Ω markdown ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ c√≥ m·ªôt n√∫t g·ªëc (H1)
      const mdContent = preprocessMarkdown(markdown?.trim());
      
      console.log("MindMapViewer: Rendering preprocessed markdown:", mdContent.substring(0, 100) + "...");
      
      // Transform Markdown to Markmap data structure
      const { root, features } = transformer.transform(mdContent);

      if (!root) {
        throw new Error("Failed to transform markdown to mind map structure");
      }

      // ADDED: Ki·ªÉm tra c·∫•u tr√∫c root ƒë·ªÉ debug
      console.log("MindMapViewer: Transformed data:", { 
        rootKeys: Object.keys(root),
        rootContent: root.content,
        childrenCount: root.children?.length || 0,
        firstChildContent: root.children && root.children.length > 0 ? root.children[0].content : null
      });

      // ƒê√°nh d·∫•u SVG ƒë√£ s·∫µn s√†ng
      setDebugInfo(prev => ({ ...prev, svgReady: true }));

      // MODIFIED: T√πy ch·ªânh c√°c t√πy ch·ªçn v·ªõi m√†u s·∫Øc ph√π h·ª£p v·ªõi giao di·ªán t·ªëi
      const enhancedOptions = {
        autoFit: true,
        paddingX: 16,
        duration: 500,
        maxWidth: 300,
        initialExpandLevel: 999, // M·ªü t·∫•t c·∫£ c√°c nh√°nh
        backgroundColor: 'transparent', // ƒê·∫£m b·∫£o n·ªÅn trong su·ªët
        color: d => {
          // B·∫£ng m√†u s√°ng h∆°n ƒë·ªÉ hi·ªÉn th·ªã t·ªët tr√™n n·ªÅn t·ªëi
          const colors = [
            '#a78bfa', // T√≠m nh·∫°t
            '#93c5fd', // Xanh d∆∞∆°ng nh·∫°t
            '#f9a8d4', // H·ªìng nh·∫°t
            '#fbbf24', // V√†ng
            '#34d399', // Xanh l√°
            '#fb923c', // Cam
            '#c4b5fd', // T√≠m nh·∫°t
          ];
          return colors[d.depth % colors.length];
        },
        // ADDED: T√πy ch·ªânh ph√¥ng ch·ªØ v√† n√©t v·∫Ω cho r√µ r√†ng h∆°n tr√™n n·ªÅn t·ªëi
        nodeFont: d => {
          const depth = d.depth || 0;
          const size = depth === 0 ? 18 : 14;
          return `${depth === 0 ? 'bold' : 'normal'} ${size}px system-ui, sans-serif`;
        },
        nodeMinHeight: 20, // TƒÉng chi·ªÅu cao t·ªëi thi·ªÉu c·ªßa node
        spacingVertical: 8, // TƒÉng kho·∫£ng c√°ch d·ªçc
        spacingHorizontal: 120, // Gi·ªØ kho·∫£ng c√°ch ngang
        // ADDED: T√πy ch·ªânh style c·ªßa c√°c ƒë∆∞·ªùng n·ªëi
        linkStyle: () => {
          return {
            stroke: '#6d6d6d', // M√†u x√°m nh·∫°t cho ƒë∆∞·ªùng n·ªëi
            strokeWidth: '1.5px', // ƒê·ªô d√†y ƒë∆∞·ªùng n·ªëi
          };
        },
        // ADDED: T√πy ch·ªânh style ch·ªØ
        nodeStyle: () => {
          return {
            fill: '#e2e8f0', // M√†u ch·ªØ s√°ng cho n·ªÅn t·ªëi 
            stroke: 'none',
            'font-family': 'system-ui, sans-serif',
          };
        },
        // ADDED: ƒê·∫£m b·∫£o ch·ªâ c√≥ m·ªôt root node hi·ªÉn th·ªã
        preset: {
          wrapText: true,
          maxWidth: 300,
        }
      };

      // Th√™m CSS custom v√†o document ƒë·ªÉ c·∫£i thi·ªán hi·ªÉn th·ªã
      if (!document.getElementById('markmap-css-fix')) {
        const styleTag = document.createElement('style');
        styleTag.id = 'markmap-css-fix';
        styleTag.innerHTML = `
          .markmap-svg .markmap-node-text {
            fill: #e2e8f0;
            font-family: system-ui, sans-serif;
          }
          .markmap-svg .markmap-node-circle {
            stroke: rgba(255, 255, 255, 0.1);
          }
          .markmap-svg .markmap-link {
            stroke: #6d6d6d; 
            stroke-width: 1.5px;
          }
          .markmap-svg text {
            fill: #e2e8f0;
          }
          .markmap-svg .markmap-foreign {
            color: #e2e8f0;
          }
        `;
        document.head.appendChild(styleTag);
      }

      // MODIFIED: T·∫°o instance Markmap v·ªõi c√°ch ƒë∆°n gi·∫£n h∆°n v√† th√™m timeout l√¢u h∆°n
      setTimeout(() => {
        try {
          console.log("Creating Markmap instance with root:", root);
          
          // ADDED: ƒê·∫£m b·∫£o ch·ªâ c√≥ m·ªôt n√∫t g·ªëc b·∫±ng c√°ch ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu
          let finalRoot = root;
          if (Array.isArray(root.children) && root.children.length > 0 && !root.content) {
            // N·∫øu root kh√¥ng c√≥ n·ªôi dung nh∆∞ng c√≥ con, c√≥ th·ªÉ ƒë√¢y l√† m·ªôt wrapper node t·ª± ƒë·ªông t·∫°o ra
            // Trong tr∆∞·ªùng h·ª£p n√†y, ta s·ª≠ d·ª•ng node ƒë·∫ßu ti√™n l√†m root
            console.log("Multiple root nodes detected, fixing to use only the first one as main root");
            finalRoot = {
              ...root.children[0],
              children: [...(root.children[0].children || []), ...(root.children.slice(1) || [])]
            };
          }
          
          // T·∫°o instance m·ªõi v·ªõi c√°c t√πy ch·ªçn
          mmRef.current = Markmap.create(svgRef.current, enhancedOptions, finalRoot);
          
          // Th√™m timeout l√¢u h∆°n ƒë·ªÉ ƒë·∫£m b·∫£o DOM ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
          setTimeout(() => {
            if (mmRef.current) {
              console.log("Fitting map to view");
              mmRef.current.fit();
              
              // ADDED: √Åp d·ª•ng CSS tr·ª±c ti·∫øp v√†o c√°c ph·∫ßn t·ª≠ SVG
              if (svgRef.current) {
                const textElements = svgRef.current.querySelectorAll('text');
                textElements.forEach(el => {
                  el.style.fill = '#e2e8f0';
                  el.style.fontFamily = 'system-ui, sans-serif';
                });
              }
            }
          }, 300);
          
        } catch (err) {
          console.error("Error creating Markmap instance:", err);
          setError(`L·ªói t·∫°o mind map: ${err.message}`);
        }
      }, 100); // TƒÉng timeout ƒë·ªÉ ƒë·∫£m b·∫£o DOM ƒë√£ s·∫µn s√†ng

    } catch (error) {
      console.error("Error rendering Markmap:", error);
      setError(`L·ªói hi·ªÉn th·ªã mind map: ${error.message}`);
      
      // ADDED: Th·ª≠ render v·ªõi markdown m·∫´u n·∫øu c√≥ l·ªói
      try {
        console.log("Attempting to render fallback markdown");
        const { root } = transformer.transform(FALLBACK_MARKDOWN);
        setTimeout(() => {
          mmRef.current = Markmap.create(svgRef.current, { autoFit: true }, root);
        }, 100);
      } catch (fallbackError) {
        console.error("Even fallback markdown failed:", fallbackError);
      }
    }

    // Cleanup function to destroy Markmap instance on unmount
    return () => {
      if (mmRef.current) {
        console.log("Cleaning up Markmap instance");
        mmRef.current.destroy();
        mmRef.current = null;
      }
    };
  }, [markdown]); // Re-run effect when markdown content changes

  // X·ª≠ l√Ω ph√≥ng to, thu nh·ªè
  const handleZoomIn = () => {
    if (mmRef.current) {
      const { scale } = mmRef.current.state;
      mmRef.current.setZoom(scale * 1.25);
    }
  };

  const handleZoomOut = () => {
    if (mmRef.current) {
      const { scale } = mmRef.current.state;
      mmRef.current.setZoom(scale / 1.25);
    }
  };

  // X·ª≠ l√Ω t·∫£i xu·ªëng ·∫£nh PNG
  const handleDownload = () => {
    if (svgRef.current) {
      // L·∫•y t√™n ch·ªß ƒë·ªÅ t·ª´ markdown n·∫øu c√≥
      let filename = 'mindmap.png';
      if (markdown) {
        const match = markdown.match(/^#\s*([^\n]+)/);
        if (match && match[1]) {
          // L√†m s·∫°ch ti√™u ƒë·ªÅ (lo·∫°i b·ªè emoji v√† k√Ω t·ª± ƒë·∫∑c bi·ªát)
          let title = match[1].replace(/[^\p{L}\p{N}\s]/gu, '').trim();
          if (title) filename = `${title.slice(0, 30)}.png`;
        }
      }
      downloadAsPng(svgRef.current, filename);
    }
  };

  return (
    <div className="w-full h-full flex flex-col" ref={containerRef}>
      {error && (
        <div className="bg-red-900/30 text-red-400 p-3 mb-3 rounded-md border border-red-700 text-sm">
          <p>{error}</p>
          <p className="mt-1 text-xs">
            <button 
              className="text-blue-400 underline" 
              onClick={toggleDebugInfo}
            >
              Xem th√¥ng tin debug
            </button>
            <span className="mx-2">|</span>
            <button 
              className="text-blue-400 underline" 
              onClick={() => {
                // Th·ª≠ render l·∫°i v·ªõi markdown m·∫´u
                setError(null);
                const md = FALLBACK_MARKDOWN;
                const { root } = transformer.transform(md);
                if (mmRef.current) mmRef.current.destroy();
                mmRef.current = Markmap.create(svgRef.current, { autoFit: true }, root);
              }}
            >
              Th·ª≠ hi·ªÉn th·ªã mind map m·∫´u
            </button>
          </p>
        </div>
      )}
      
      <div className="w-full flex-1 border border-gray-700 rounded-lg overflow-hidden bg-gray-800/50 relative">
        {/* Controls */}
        <div className="absolute top-3 right-3 z-10 bg-gray-800/80 rounded-md p-1.5 flex gap-2 backdrop-blur-sm">
          <button 
            className="bg-purple-600/70 hover:bg-purple-600 text-white p-1.5 rounded flex items-center justify-center" 
            onClick={handleZoomIn}
            title="Ph√≥ng to"
          >
            <FiZoomIn size={16} />
          </button>
          <button 
            className="bg-purple-600/70 hover:bg-purple-600 text-white p-1.5 rounded flex items-center justify-center"
            onClick={handleZoomOut}
            title="Thu nh·ªè"
          >
            <FiZoomOut size={16} />
          </button>
          <button 
            className="bg-purple-600/70 hover:bg-purple-600 text-white p-1.5 rounded flex items-center justify-center"
            onClick={() => mmRef.current?.fit()}
            title="Kh·ªõp v·ªõi m√†n h√¨nh"
          >
            <FiMaximize2 size={16} />
          </button>
          <button 
            className="bg-green-600/70 hover:bg-green-600 text-white p-1.5 rounded flex items-center justify-center"
            onClick={handleDownload}
            title="T·∫£i xu·ªëng d∆∞·ªõi d·∫°ng ·∫£nh PNG"
          >
            <FiDownload size={16} />
          </button>
          <button 
            className="bg-blue-600/70 hover:bg-blue-600 text-white p-1.5 rounded flex items-center justify-center"
            onClick={toggleDebugInfo}
            title="Hi·ªÉn th·ªã th√¥ng tin debug"
          >
            <FiInfo size={16} />
          </button>
        </div>
        
        {/* MODIFIED: ƒêi·ªÅu ch·ªânh container SVG ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªÉn th·ªã ƒë√∫ng v·ªõi n·ªÅn t·ªëi */}
        <div className="w-full h-full">
          <svg 
            ref={svgRef} 
            className="w-full h-full markmap-svg" 
            style={{ minHeight: '400px', display: 'block', background: 'transparent' }}
            width="100%" 
            height="100%" 
          />
        </div>
        
        {/* Help text */}
        <div className="absolute bottom-2 left-2 text-xs text-gray-300 bg-gray-800/80 p-1.5 rounded backdrop-blur-sm max-w-xs">
          <p className="mb-1"><strong>ƒêi·ªÅu khi·ªÉn:</strong> K√©o ƒë·ªÉ di chuy·ªÉn | Scroll ƒë·ªÉ ph√≥ng to/thu nh·ªè</p>
          <p>Click v√†o n√∫t <span className="inline-block w-2 h-2 bg-purple-400 rounded-full mx-1"></span> ƒë·ªÉ m·ªü r·ªông/thu g·ªçn nh√°nh</p>
        </div>
      </div>
    </div>
  );
};

export default MindMapViewer;
