from datetime import datetime
import re  # Th√™m import re ƒë·ªÉ s·ª≠ d·ª•ng regular expressions
import logging  # Th√™m logging ƒë·ªÉ d·ªÖ debug
from .base_tool import BaseTool

# T·∫°o logger
logger = logging.getLogger(__name__)

class MindMapCreatorTool(BaseTool):
    @property
    def name(self) -> str:
        return "Mind_Map_Creator"
    
    @property
    def description(self) -> str:
        return "T·∫°o s∆° ƒë·ªì t∆∞ duy cho m·ªôt ch·ªß ƒë·ªÅ."
    
    async def execute(self, assistant, **kwargs):
        topic = kwargs.get("question", "")
        if not topic.strip():
            return "Vui l√≤ng cung c·∫•p ch·ªß ƒë·ªÅ ƒë·ªÉ t·∫°o s∆° ƒë·ªì t∆∞ duy."
        
        try:
            logger.info(f"Mind Map Creator: Retrieving context for '{topic}'...")
            context = await assistant.retriever.search(topic)
            if not context:
                logger.warning(f"Mind Map Creator: No documents found for '{topic}'.")
                return f"Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ '{topic}' ƒë·ªÉ t·∫°o s∆° ƒë·ªì t∆∞ duy."
            
            # Th√™m th√¥ng tin slide v√†o context n·∫øu c√≥
            context_text = "\n\n".join([f"Slide {doc.get('slide_number', 'N/A')}: {doc['text']}" for doc in context])
            logger.info(f"Mind Map Creator: Retrieved {len(context)} chunks for '{topic}'.")
            
            prompt = f"""D·ª±a tr√™n th√¥ng tin sau, t·∫°o s∆° ƒë·ªì t∆∞ duy tr·ª±c quan v√† phong ph√∫ cho ch·ªß ƒë·ªÅ "{topic}".
            Th√¥ng tin: {context_text}
            
            S∆° ƒë·ªì t∆∞ duy n√™n c√≥:
            1. Ch·ªß ƒë·ªÅ ch√≠nh ·ªü trung t√¢m v·ªõi emoji ƒë·∫°i di·ªán ph√π h·ª£p
            2. C√°c nh√°nh ch√≠nh (kh√°i ni·ªám ch√≠nh) v·ªõi icon/emoji ph√π h·ª£p v·ªõi m·ªói nh√°nh
            3. C√°c nh√°nh ph·ª• (kh√°i ni·ªám ph·ª•, k√®m s·ªë slide n·∫øu c√≥)
            4. M·ªëi quan h·ªá gi·ªØa c√°c kh√°i ni·ªám (th·ªÉ hi·ªán qua c·∫•u tr√∫c l·ªìng nhau)
            5. Th√¥ng tin ng·∫Øn g·ªçn, s√∫c t√≠ch v·ªÅ m·ªói kh√°i ni·ªám
            
            Y√™u c·∫ßu ƒë·ªãnh d·∫°ng:
            - Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng m·ªôt chu·ªói Markdown h·ª£p l·ªá cho Markmap.
            - S·ª≠ d·ª•ng d·∫•u `#` cho ch·ªß ƒë·ªÅ ch√≠nh v√† PH·∫¢I k√®m emoji ph√π h·ª£p.
            - S·ª≠ d·ª•ng d·∫•u `-` ho·∫∑c `*` v√† th·ª•t l·ªÅ (2 d·∫•u c√°ch) ƒë·ªÉ th·ªÉ hi·ªán c√°c c·∫•p ƒë·ªô nh√°nh.
            - Th√™m emoji ho·∫∑c icon ph√π h·ª£p tr∆∞·ªõc m·ªói nh√°nh ch√≠nh ƒë·ªÉ tƒÉng t√≠nh tr·ª±c quan.
            - Th√™m c√°c m√¥ t·∫£ ng·∫Øn g·ªçn cho m·ªói nh√°nh ƒë·ªÉ l√†m r√µ kh√°i ni·ªám (n√™n vi·∫øt sau d·∫•u `:` ho·∫∑c trong ngo·∫∑c).
            - Th√™m ƒë·ªãnh d·∫°ng in ƒë·∫≠m ho·∫∑c in nghi√™ng cho c√°c kh√°i ni·ªám quan tr·ªçng.
            - S·ª≠ d·ª•ng li√™n k·∫øt Markdown (n·∫øu c√≥ th√¥ng tin slide) cho c√°c tham chi·∫øu: [T√™n kh√°i ni·ªám](Slide X).
            
            V√≠ d·ª• ƒë·ªãnh d·∫°ng Markdown (PH·∫¢I theo ch√≠nh x√°c ƒë·ªãnh d·∫°ng n√†y, v·ªõi emoji/icon cho m·ªói nh√°nh):
            ```markdown
            # üß† Ch·ªß ƒë·ªÅ ch√≠nh
            - üìä Nh√°nh ch√≠nh 1: Kh√°i ni·ªám c·ªët l√µi
              - üìå Nh√°nh ph·ª• 1.1: *Gi·∫£i th√≠ch s√∫c t√≠ch*
              - üîç Nh√°nh ph·ª• 1.2: **ƒêi·ªÉm quan tr·ªçng**
                - Chi ti·∫øt b·ªï sung (Slide 3)
            - üõ†Ô∏è Nh√°nh ch√≠nh 2: C√¥ng c·ª• v√† ·ª©ng d·ª•ng
              - üì± Nh√°nh ph·ª• 2.1: ·ª®ng d·ª•ng th·ª±c ti·ªÖn
                - üìò [Tham kh·∫£o th√™m](Slide 5)
            - üìù Nh√°nh ch√≠nh 3: T√≥m t·∫Øt v√† k·∫øt lu·∫≠n
            ```
            
            ƒê·ªãnh d·∫°ng n√†y s·∫Ω t·∫°o ra s∆° ƒë·ªì t∆∞ duy tr·ª±c quan v·ªõi c√°c emoji gi√∫p ng∆∞·ªùi d√πng d·ªÖ d√†ng hi·ªÉu v√† nh·ªõ c√°c kh√°i ni·ªám.
            Ch·ªâ tr·∫£ v·ªÅ markdown thu·∫ßn t√∫y, kh√¥ng k√®m theo text gi·ªõi thi·ªáu hay gi·∫£i th√≠ch kh√°c.
            """

            logger.info(f"Mind Map Creator: Calling LLM for '{topic}'...")
            response = await assistant.llm.ainvoke(prompt)  # Use async invoke
            markdown_content = response  # Assuming model returns content directly
            logger.info(f"Mind Map Creator: Mind map generated for '{topic}'.")

            # Basic check if it looks like markdown
            if not markdown_content.strip().startswith("#"):
                logger.warning(f"Mind Map Creator: Output for '{topic}' doesn't start with #. May not be valid Markmap Markdown.")
            
            # Clean potential markdown code fences ```markdown ... ```
            cleaned_markdown = re.sub(r'^```markdown\s*|\s*```$', '', markdown_content, flags=re.MULTILINE).strip()
            
            # Return an object with necessary information for rendering
            return {
                "topic": topic,
                "markdown": cleaned_markdown,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.exception(f"Mind Map Creator: Error generating mind map for '{topic}': {e}")
            return f"L·ªói khi t·∫°o s∆° ƒë·ªì t∆∞ duy cho '{topic}': {str(e)}"
